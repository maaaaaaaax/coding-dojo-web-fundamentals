jQuery-notes.txt

jQuery is a JavaScript library, which can be accessed by including the following in the head section of an HTML document.

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

Include all your jQuery functions inside the document ready tag:

$(document).ready(function(){
  });

Example jQuery function to select an HTML body tag.

$('body').click(function(){
    // more code will go here
});

There are three portions for using jQuery.

1. The first is the selector which is $('body'). The selector syntax works exactly like the CSS selector syntax except that everything goes inside of this: $(' '). This is how we grab an HTML item. Here are some examples of how to select an HTML item.

In order to select all of the buttons of your web page, you type:

$('button')


What if you want to select all buttons with class name blue? Same as CSS!:

$('button.blue')


Now, if you want to select all buttons AND elements with class blue, do the following:

$('button, .blue')


And if you want to select an HTML with an ID, here is how we do that:

$('#red')


2. Add an event handler
Now that we have selected something using the jQuery selector, we can add an event listener. Remember, jQuery and JavaScript make a website interactive, and this is how we define what happens to those interactions. An Event listener is a trigger for all the code we wish to write that involves the element we selected. The event listener for a button being clicked is the following:

$('button').click();  //**now the document is listening on a click event for the button element!**


3. Write the action!
The last portion is the action we want our page to enact when this event is triggered. So what happens now? What happens when we click a button on our page? Nothing yet because we haven't coded what we want to happen! Well, let's make something happen, let's add an action.

$('button').click(function(){
   alert("You have clicked a button!");
});

We put the function(){} code in to tell jQuery that we want to run a function when the button is clicked. Within that function, we write the code that makes the website interactive! If we want to pass parameters to the function, we specify them in the parenthesis. That's it!


GETTERS & SETTERS

When we call the function .text() without a parameter, the function will behave as what is called a getter function. This function will actually return the value of the text of the paragraph called myParagraph.

When you load this page now, you will see the content of myParagraph in a pop-up box on the screen. The use of the term 'getter function' means that the function gets the value of a particular item and returns it, which is why we were able to get the value of the text and assign it to the variable myText that we just made

To illustrate this, let's run the following code:

<script>
  $(document).ready(function(){
      var myText = $('#myParagraph').text();
      alert(myText);
  })
</script>
<body>
    <p id='myParagraph'> This is my paragraph! </p>
</body>


The other way to use the .text() function is as a setter function. You will probably find yourself using .text() in this capacity more so than as a getter. By running .text() with a value inside of the parentheses, we set the value of the selected attribute. This is the difference between using .text() as a getter and a setter.
To demonstrate the use of .text() as a setter, look at the following code:

<script>
  $(document).ready(function(){
      $('button').click(function(){
          $('#myParagraph').text('see how I .text() works as a setter!');
      })
  })
</script>
<body>
    <p id='myParagraph'> This is my paragraph! </p>
    <button> Click me to change the paragraph! </button>
</body>


Learn only these functions:

Effects (functions to do some cool animation effects)
  .hide()
  .show()
  .toggle()
  .slideUp()
  .slideDown()
  .slideToggle()
  .fadeOut()
  .fadeIn()
CSS (adding or removing a class for any HTML element/DOM)
  .addClass()
  .removeClass()
  .css()
Manipulation (retrieving or setting value or text in any HTML element)
  .after()
  .append()
  .prepend()
  .attr()
  .before()
  .html()
  .text()
  .val()
Events (functions to handle an event)
  .click()
  .on()
  .live() - deprecated (JQuery 1.7)
  .hover()


Quiz notes:

1. What would $('div p') select in Jquery?
  all paragraphs within a div


2. How do we access jQuery?
  importing their code by adding a 'src' attribute to our JavaScript tags, either a local version or remote

5. With jQuery, look at the following selector: $('p'). What does it select?
  all of the paragraphs

6. What is the correct jQuery code to set the background color of all p elements to red
  $('p').css('background-color', 'red');

7. With jQuery, look at the following selector: $('div.intro'). What does it select?
  All div elements with class='intro'

8. What would the following do? $('p, a, #dojo').addClass('red')
  add class 'red' to all paragraphs, all links and an element that has an id dojo

9. How is $('p.dojo') different from $('p .dojo')?
  $('p.dojo') is selecting all PARAGRAPHS with the class name of 'dojo' while $('p .dojo') is referring to elements with class 'dojo' that are INSIDE the paragraphs

11. How do you give multiple classes to an element?
  You could do it by doing things like < a href='http://www.codingdojo.com' class='dojo black awesome' >anchor text < /a >. This code would add three classes to the a tag: dojo, black, and awesome.

13. What does the selector $(this) allow us to do?
  Select the particular element that triggered the event handler, without having to refer to it by ID

14. What is the difference between .html() and .append()??
  .html() overwrites the markup of an element, .append() adds to the markup
